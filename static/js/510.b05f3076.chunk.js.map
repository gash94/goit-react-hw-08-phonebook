{"version":3,"file":"static/js/510.b05f3076.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export const getContacts = (state) => state.contacts.items;\n\nexport const getIsLoading = (state) => state.contacts.isLoading;\n\nexport const getError = (state) => state.contacts.error;\n\nexport const getStatusFilter = (state) => state.filter.status;\n","import { useDispatch, useSelector } from \"react-redux\";\n\nimport { getContacts } from \"../../redux/contacts/selectors\";\nimport { addContact } from \"../../redux/contacts/operations\";\nimport {\n    Button,\n    FormLabel,\n    Input,\n    InputGroup,\n    InputLeftElement,\n} from \"@chakra-ui/react\";\nimport { AtSignIcon, PhoneIcon } from \"@chakra-ui/icons\";\n\nexport const ContactForm = () => {\n    const dispatch = useDispatch();\n\n    const contacts = useSelector(getContacts);\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const name = e.target.elements.name.value;\n        const number = e.target.elements.number.value;\n        const normalizedCase = name.toLowerCase();\n        let isAdded = false;\n\n        contacts.forEach((el) => {\n            if (el.name.toLowerCase() === normalizedCase) {\n                alert(`${name} is already in contacts`);\n                isAdded = true;\n            }\n        });\n\n        if (isAdded) {\n            return;\n        }\n        dispatch(addContact({ name, number }));\n        e.target.reset();\n    };\n\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n                <FormLabel>\n                    Name\n                    <InputGroup>\n                        <InputLeftElement pointerEvents=\"none\">\n                            <AtSignIcon color=\"gray.300\" />\n                        </InputLeftElement>\n                        <Input\n                            autoComplete=\"off\"\n                            type=\"text\"\n                            name=\"name\"\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                            placeholder=\"e.g. John Doe\"\n                            required\n                        />\n                    </InputGroup>\n                </FormLabel>\n                <FormLabel>\n                    Number\n                    <InputGroup>\n                        <InputLeftElement pointerEvents=\"none\">\n                            <PhoneIcon color=\"gray.300\" />\n                        </InputLeftElement>\n                        <Input\n                            autoComplete=\"off\"\n                            type=\"tel\"\n                            name=\"number\"\n                            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                            placeholder=\"e.g. 560-432-234\"\n                            required\n                        />\n                    </InputGroup>\n                </FormLabel>\n                <Button type=\"submit\">Add contact</Button>\n            </form>\n        </>\n    );\n};\n","import { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"../../redux/contacts/operations\";\nimport PropTypes from \"prop-types\";\nimport {\n    Text,\n    Heading,\n    Button,\n    Box,\n    Stack,\n    Flex,\n    Image,\n} from \"@chakra-ui/react\";\nimport { CloseIcon } from \"@chakra-ui/icons\";\nimport { faker } from \"@faker-js/faker\";\n\nexport const Contact = ({ contact }) => {\n    const dispatch = useDispatch();\n    const avatar = faker.image.avatar();\n\n    const handleDelete = () => dispatch(deleteContact(contact.id));\n\n    return (\n        <Box\n            maxW=\"auto\"\n            borderWidth=\"2px\"\n            borderRadius=\"lg\"\n            overflow=\"hidden\"\n            p={5}\n            m={2}>\n            <Stack align={\"start\"} spacing={2}>\n                <Flex w={150} h={150} align=\"center\" justify=\"center\">\n                    <Image\n                        borderRadius=\"full\"\n                        boxSize=\"150px\"\n                        src={avatar}\n                        alt={contact.name}\n                    />\n                </Flex>\n                <Box mt={2}>\n                    <Heading size=\"md\">{contact.name}</Heading>\n                    <Text mt={1} fontSize={\"sm\"}>\n                        {contact.number}\n                    </Text>\n                </Box>\n                <Button\n                    variant=\"outline\"\n                    rightIcon={<CloseIcon color=\"red\" />}\n                    onClick={handleDelete}>\n                    Delete contact\n                </Button>\n            </Stack>\n        </Box>\n    );\n};\nContact.propTypes = {\n    contact: PropTypes.shape({\n        name: PropTypes.string,\n        number: PropTypes.string,\n        id: PropTypes.string,\n    }),\n};\n","import { useSelector } from \"react-redux\";\nimport { Contact } from \"../Contact/Contact\";\nimport { getStatusFilter, getContacts } from \"../../redux/contacts/selectors\";\nimport { Flex, ListItem, Text, UnorderedList } from \"@chakra-ui/react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nexport const ContactList = () => {\n    const contacts = useSelector(getContacts);\n    const statusFilter = useSelector(getStatusFilter);\n    const visibileContacts = contacts.filter((contact) => {\n        return contact.name.toLowerCase().includes(statusFilter);\n    });\n    return (\n        <>\n            {contacts.length <= visibileContacts.length ? (\n                <Text fontSize=\"xl\">Number of contacts: {contacts.length}</Text>\n            ) : (\n                <Text fontSize=\"xl\">\n                    Contacts found: {visibileContacts.length}\n                </Text>\n            )}\n            {contacts.length === 0 ? (\n                <Text fontSize=\"xl\">No contacts yet 🙁</Text>\n            ) : contacts !== \"\" && visibileContacts.length === 0 ? (\n                <Text fontSize=\"xl\">No contacts found 😞 </Text>\n            ) : (\n                <UnorderedList styleType=\"none\" m=\"0\" p=\"0\">\n                    <Flex wrap=\"wrap\" justify=\"center\">\n                        <AnimatePresence>\n                            {visibileContacts.reverse().map((contact) => (\n                                <ListItem\n                                    as={motion.li}\n                                    key={contact.id}\n                                    initial={{\n                                        y: -50,\n                                        opacity: 0,\n                                    }}\n                                    animate={{\n                                        y: 0,\n                                        opacity: 1,\n                                        transition: {\n                                            duration: 0.5,\n                                        },\n                                    }}\n                                    exit={{\n                                        x: 50,\n                                        opacity: 0,\n                                        transition: {\n                                            duration: 0.2,\n                                        },\n                                    }}>\n                                    {<Contact contact={contact} />}\n                                </ListItem>\n                            ))}\n                        </AnimatePresence>\n                    </Flex>\n                </UnorderedList>\n            )}\n        </>\n    );\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { setStatusFilter } from \"../../redux/filter/slice\";\nimport { useState } from \"react\";\n\nimport { Search2Icon, SmallCloseIcon } from \"@chakra-ui/icons\";\nimport {\n    Box,\n    Flex,\n    Text,\n    Input,\n    IconButton,\n    InputRightElement,\n    InputGroup,\n    InputLeftElement,\n} from \"@chakra-ui/react\";\nimport { getStatusFilter } from \"../../redux/contacts/selectors\";\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const [isFilterLoading, setIsFilterLoading] = useState(false);\n    const filter = useSelector(getStatusFilter);\n\n    const handleFilterChange = (e) => {\n        setIsFilterLoading(true);\n        dispatch(setStatusFilter(e.target.value));\n        setTimeout(() => {\n            setIsFilterLoading(false);\n        }, 500);\n    };\n\n    const clearInput = () => {\n        dispatch(setStatusFilter(\"\"));\n    };\n\n    return (\n        <Box textAlign=\"left\" maxW=\"400\">\n            <Text fontSize=\"xl\">Find contacts by name</Text>\n            <Flex as=\"form\" gap=\"2\">\n                <InputGroup>\n                    <InputLeftElement\n                        children={\n                            <IconButton\n                                isLoading={isFilterLoading}\n                                colorScheme=\"blue\"\n                                aria-label=\"Search database\"\n                                icon={<Search2Icon />}\n                                variant=\"ghost\"\n                            />\n                        }\n                    />\n                    <Input\n                        placeholder=\"Try to search somebody...\"\n                        type=\"text\"\n                        name=\"key\"\n                        value={filter}\n                        required\n                        variant=\"flushed\"\n                        pl=\"16\"\n                        onChange={handleFilterChange}\n                        _hover={{ fontWeight: \"semibold\" }}\n                    />\n                    <InputRightElement\n                        children={\n                            filter.length > 0 && (\n                                <IconButton\n                                    color=\"red.500\"\n                                    aria-label=\"Search database\"\n                                    icon={<SmallCloseIcon />}\n                                    variant=\"ghost\"\n                                    onClick={clearInput}\n                                />\n                            )\n                        }\n                    />\n                </InputGroup>\n            </Flex>\n        </Box>\n    );\n};\n","import { useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\n\nimport { ContactForm } from \"../components/ContactForm/ContactForm\";\nimport { ContactList } from \"../components/ContactList/ContactList\";\nimport { Filter } from \"../components/Filter/Filter\";\nimport { fetchContacts } from \"../redux/contacts/operations\";\nimport {\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    ModalCloseButton,\n    Button,\n    useDisclosure,\n    Flex,\n    Spacer,\n} from \"@chakra-ui/react\";\nimport { AddIcon } from \"@chakra-ui/icons\";\n\nconst Contacts = () => {\n    const dispatch = useDispatch();\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <>\n            <Flex\n                minWidth=\"max-content\"\n                alignItems=\"center\"\n                justifyContent=\"center\">\n                <Filter />\n                <Spacer />\n                <Button rightIcon={<AddIcon />} onClick={onOpen}>\n                    Add contact\n                </Button>\n                <Modal\n                    blockScrollOnMount={false}\n                    isOpen={isOpen}\n                    onClose={onClose}\n                    onSubmit={onClose}\n                    motionPreset=\"slideInBottom\">\n                    <ModalOverlay />\n                    <ModalContent>\n                        <ModalHeader>Add Contact</ModalHeader>\n                        <ModalCloseButton />\n                        <ModalBody>\n                            <ContactForm />\n                        </ModalBody>\n                        <ModalFooter></ModalFooter>\n                    </ModalContent>\n                </Modal>\n            </Flex>\n            <ContactList />\n        </>\n    );\n};\nexport default Contacts;\n"],"names":["getContacts","state","contacts","items","getStatusFilter","filter","status","ContactForm","dispatch","useDispatch","useSelector","onSubmit","e","preventDefault","name","target","elements","value","number","normalizedCase","toLowerCase","isAdded","forEach","el","alert","addContact","reset","pointerEvents","color","I","autoComplete","type","pattern","title","placeholder","required","Contact","contact","avatar","faker","maxW","borderWidth","borderRadius","overflow","p","m","align","spacing","w","h","justify","boxSize","src","alt","mt","size","fontSize","variant","rightIcon","onClick","deleteContact","id","ContactList","statusFilter","visibileContacts","includes","length","styleType","wrap","AnimatePresence","reverse","map","as","motion","initial","y","opacity","animate","transition","duration","exit","x","Filter","useState","isFilterLoading","setIsFilterLoading","textAlign","gap","children","isLoading","colorScheme","icon","pl","onChange","setStatusFilter","setTimeout","_hover","fontWeight","useDisclosure","isOpen","onOpen","onClose","useEffect","fetchContacts","minWidth","alignItems","justifyContent","blockScrollOnMount","motionPreset"],"sourceRoot":""}